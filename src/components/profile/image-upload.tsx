"use client";

import { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Camera, Upload, X } from "lucide-react";
import { useImageUpload } from "@/hooks/use-image-upload";
import { useImageUrl } from "@/hooks/use-image-url";
import { cn } from "@/lib/utils";
import { Id } from "@/convex/_generated/dataModel";

interface ImageUploadProps {
  currentImage?: string;
  currentStorageId?: Id<"_storage">;
  onImageChange: (
    imageUrl: string,
    storageId?: Id<"_storage">,
    file?: File
  ) => void;
  firstName?: string;
  lastName?: string;
  className?: string;
}

export function ImageUpload({
  currentImage,
  currentStorageId,
  onImageChange,
  firstName,
  lastName,
  className,
}: ImageUploadProps) {
  const [preview, setPreview] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { uploadImage, isUploading } = useImageUpload();

  // Get the image URL from storage ID if available
  const imageUrl = useImageUrl(currentStorageId);
  const displayImage = preview || imageUrl || currentImage || undefined;

  // Clean up preview URL when actual image URL is available
  useEffect(() => {
    if (imageUrl && preview) {
      URL.revokeObjectURL(preview);
      setPreview(null);
    }
  }, [imageUrl, preview]);

  const getInitials = (firstName?: string, lastName?: string) => {
    const first = firstName?.charAt(0)?.toUpperCase() || "";
    const last = lastName?.charAt(0)?.toUpperCase() || "";
    return first + last || "U";
  };

  const handleFileSelect = async (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    const file = event.target.files?.[0];
    if (!file) return;

    // Validate file type
    if (!file.type.startsWith("image/")) {
      alert("Please select an image file");
      return;
    }

    // Validate file size (5MB limit)
    if (file.size > 5 * 1024 * 1024) {
      alert("File size must be less than 5MB");
      return;
    }

    // Create preview
    const previewUrl = URL.createObjectURL(file);
    setPreview(previewUrl);

    // Upload image
    const storageId = await uploadImage(file);
    if (storageId) {
      // Pass the preview URL, storage ID, and file to the callback
      // The actual URL will be generated by the useImageUrl hook
      onImageChange(previewUrl, storageId, file);
    } else {
      // Remove preview on error
      URL.revokeObjectURL(previewUrl);
      setPreview(null);
    }
  };

  const handleRemoveImage = () => {
    onImageChange("", undefined, undefined);
    setPreview(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  return (
    <div className={cn("flex items-center gap-4", className)}>
      <div className="relative">
        <Avatar className="h-20 w-20">
          <AvatarImage
            src={
              displayImage && displayImage.trim() !== ""
                ? displayImage
                : undefined
            }
            alt="Profile picture"
          />
          <AvatarFallback className="text-lg">
            {getInitials(firstName, lastName)}
          </AvatarFallback>
        </Avatar>
        {isUploading && (
          <div className="absolute inset-0 bg-black/50 rounded-full flex items-center justify-center">
            <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-white"></div>
          </div>
        )}
      </div>

      <div className="space-y-2">
        <div className="flex items-center gap-2">
          <Camera className="h-4 w-4 text-muted-foreground" />
          <span className="text-sm text-muted-foreground">Profile Picture</span>
        </div>

        <div className="flex gap-2">
          <Button
            type="button"
            variant="outline"
            size="sm"
            onClick={() => fileInputRef.current?.click()}
            disabled={isUploading}
            className="flex items-center gap-2"
          >
            <Upload className="h-3 w-3" />
            {currentImage ? "Change" : "Upload"}
          </Button>

          {currentImage && (
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={handleRemoveImage}
              disabled={isUploading}
              className="flex items-center gap-2 text-red-600 hover:text-red-700"
            >
              <X className="h-3 w-3" />
              Remove
            </Button>
          )}
        </div>

        <div className="text-xs text-muted-foreground">
          JPG, PNG or GIF. Max 5MB.
        </div>
      </div>

      <input
        ref={fileInputRef}
        type="file"
        accept="image/*"
        onChange={handleFileSelect}
        className="hidden"
      />
    </div>
  );
}
